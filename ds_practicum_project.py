# -*- coding: utf-8 -*-
"""DS Practicum Project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MXGMzUgGyI40HoXc7F-MvtRNV8PB486f

*Will Hanvey, Mia Padberg, Daniel Xu*

DS 2001:
Final Project

Spring Semester 2021

Examining the Relationship Between the Strength of a Nation's Democracy with its response to Covid-19
"""

import requests
import csv
import pandas as pd
import os
import matplotlib.pyplot as plt
import statistics
import numpy as np
from google.colab import drive
drive.mount('/content/gdrive')

URL = "http://www.gapm.io/dxlsdemocrix"
FILENAME = "covid_data_january_1st_csv.csv"

def download(website):
    # Goes to website, allows for the redirect to occur,
    # and downloads the file as file.xlsx 
    file = requests.get(website, allow_redirects = True)
    open("file.xlsx", "wb").write(file.content)
    print("I have downloaded the file as 'file.xlsx'.")

def excel_to_csv(excel_file, sheet_name):
    # names we use: "data-for-countries-etc-by-year", "data-for-world-by-year"
    df = pd.read_excel(excel_file, sheet_name)
    # These four countries don't have 2020 data, so running without them
    df = df[df["name"] != "Algeria"]
    df = df[df["name"] != "Iran"]
    df = df[df["name"] != "Lithuania"]
    df = df[df["name"] != "Ukraine"]
    return df

def get_covid_data():
  # Reads the covid data file which has been downloaded onto google drive
  covid_df = pd.read_csv("/content/gdrive/MyDrive/covid_data_january_1st_csv.csv")
  return(covid_df)

def sort_year(df, year):
  # Locates only the rows where the data refers to 2020
  # Creates new df with just this data
  new_df = df.loc[df["time"] == year]
  return new_df

"""The following functions will be used to display the changes in democracy index scores from 2019 - 2020."""

def plot_nineteen_vs_twenty(df):
  # graphing 2019 vs 2020 next to each other
    # make a new column for 2019
    df["2019_DI"] = df["Democracy index (EIU)"] + df["Change in democracy index (EIU)"]
    # first ten countries
    df.iloc[:10].plot(x = "name", y = ["Democracy index (EIU)", "2019_DI"], 
            color = ["blue", "red"], kind = "barh")
    plt.gca().invert_yaxis()
    plt.xlabel('Democracy Index')
    plt.ylabel('Country')
    plt.legend(["2020", "2019"], loc = "lower right", 
               bbox_to_anchor=(-0.02, -0.18))
    plt.title("Change in Democracy Index 2020 vs 2019")
    
    # last 10 countries for comparison
    df_last10 = df.tail(10)
    df_last10.plot(x = "name", y = ["Democracy index (EIU)", "2019_DI"], 
            color = ["blue", "red"], kind = "barh")
    plt.gca().invert_yaxis()
    plt.xlabel('Democracy Index')
    plt.ylabel('Country')
    plt.legend(["2020", "2019"], loc = "lower right")

def plot_nineteen_vs_twenty_line(df):
    twenty = (df.loc[df['time'] == 2020])
    twenty_list = twenty['Democracy index (EIU)'].tolist()
    nineteen = (df.loc[df['time'] == 2019])
    nineteen_list = nineteen['Democracy index (EIU)'].tolist()
    x = [2019, 2020]
    for i in range(len(nineteen_list)):
      y = [nineteen_list[i], twenty_list[i]]
      plt.plot(x, y, linewidth = .5)
    plt.title("Changes in Democracy Index Scores from 2019-2020")
    plt.xlabel("Year")
    plt.ylabel("Democracy Index Score")
    plt.xticks(x)
    plt.show()

    # New line graph depicting just the change in mean democracy index score 
    # from 2019-2020
    y = [statistics.mean(nineteen_list), statistics.mean(twenty_list)]
    plt.plot(x, y, linewidth = 7.5, color = 'orange')
    plt.title("Change in Mean Democracy Index Scores from 2019-2020")
    plt.xlabel("Year")
    plt.ylabel("Democracy Index Score")
    plt.xticks(x)
    plt.show()

"""These next functions will be used to display the relationships between Democracy Index Scores and certain covid datasets.

"""

# This function cleans our covid dataframe and accounts for differences in
# countries listed between the democracy index file and the covid data file
def clean_covid_data(covid_df, democracy_df):
    locations = set(covid_df["location"])
    names = set(democracy_df["name"])
    # Finds the countries in common listed in the covid_df and democracy_df
    both = locations.intersection(names)
    
    # Creates new dataframe with only the countries in common as part of it
    covid_df = covid_df[covid_df["location"].isin(both)]

    # Replaces NaN values with a 0, replacement is permanent and immediately
    # affects the dataframe
    covid_df.fillna(0, inplace = True)
    return covid_df

# This function cleans our democracy dataframe, similar to the above function
def clean_democracy_data(covid_df, democracy_df):
    locations = set(covid_df["location"])
    names = set(democracy_df["name"])
    both = locations.intersection(names)
    
    democracy_df = democracy_df[democracy_df["name"].isin(both)]
    democracy_df.fillna(0, inplace = True)
    return democracy_df

def plot_covid_vs_democracy(covid_df, covid_column, dem_df, dem_column):
    # Create a scatterplot, mapping all countries and their respective points
    # on a graph
    merged_df = pd.merge(left=dem_df, right=covid_df, left_on='name', right_on='location')
    
    nan_value = float("NaN")
    if covid_column == "hosp_patients" or covid_column == "hosp_patients_per_million":
      merged_df.replace(0.0, nan_value, inplace=True)
      merged_df.dropna(subset = ["hosp_patients"], inplace=True)
    if covid_column == "total_tests" or covid_column == "total_tests_per_thousand":
      merged_df.replace(0.0, nan_value, inplace=True)
      merged_df.dropna(subset = ["total_tests"], inplace=True)

    plt.scatter(merged_df[dem_column], merged_df[covid_column], color = "orchid")
    
    # Find m and b coefficients needed to create a best-fit line
    m, b = np.polyfit(merged_df[dem_column], merged_df[covid_column], 1)
    
    # Use m and b to create a best fit line
    plt.plot(merged_df[dem_column], (m * merged_df[dem_column]) + b, 
             color = "red", linewidth = 3)
    plt.title("Correlation between " + dem_column + " and " + covid_column)
    plt.xlabel(dem_column)
    plt.ylabel(covid_column)
    plt.show()
    
    # Prints out the correlation coefficient of the two variables
    correlation = np.corrcoef(merged_df[dem_column], merged_df[covid_column])
    print(correlation)

def plots(df, covid_df):
    plot_nineteen_vs_twenty(df)

    # Regression plots
    # Uses the plot_covid_vs_democracy function to graph each covid data variable 
    # against democracy index score
    plot_covid_vs_democracy(covid_df, "total_tests",
                            df, "Democracy index (EIU)")
    plot_covid_vs_democracy(covid_df, "total_tests_per_thousand",
                            df, "Democracy index (EIU)")
    plot_covid_vs_democracy(covid_df, "total_cases",
                            df, "Democracy index (EIU)")
    plot_covid_vs_democracy(covid_df, "total_cases_per_million",
                            df, "Democracy index (EIU)")
    plot_covid_vs_democracy(covid_df, "hosp_patients",
                            df, "Democracy index (EIU)")
    plot_covid_vs_democracy(covid_df, "hosp_patients_per_million",
                            df, "Democracy index (EIU)")
    plot_covid_vs_democracy(covid_df, "total_deaths",
                            df, "Democracy index (EIU)")
    plot_covid_vs_democracy(covid_df, "total_deaths_per_million",
                            df, "Democracy index (EIU)")

if __name__ == "__main__":
    download(URL)
    covid_df = get_covid_data()
    EXCEL = "file.xlsx"
    df = excel_to_csv(EXCEL, "data-for-countries-etc-by-year")
    # This uses 2019 data so we need to keep it above the sort year 2020
    plot_nineteen_vs_twenty_line(df)
    df = sort_year(df, 2020)
    df = df.sort_values(['Democracy index (EIU)'], ascending = False)
    df = clean_democracy_data(covid_df, df)
    covid_df = clean_covid_data(covid_df, df)
    plots(df, covid_df)